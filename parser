#!/usr/bin/env python

from __future__ import print_function
from fileinput import input
from getopt import getopt, GetoptError
import sys, re, string

terminals = [';', 'id', ':=', 'if', 'then', 'endif', 'else', 'while', 'do',
    'end', 'c', '<', '=', '!=', '+', '-', '$']

table = {'P': {'id': ['L'], 'if': ['L'], 'while': ['L']},
    'L': {'id': ['I', 'L1'], 'if': ['I', 'L1'], 'while': ['I', 'L1']},
    'L1': {';': [';', 'L'], 'endif': [], 'else': [], 'end': [], '$': []},
    'I': {'id': ['A'], 'if': ['C'], 'while': ['W']},
    'A': {'id': ['id', ':=', 'E']},
    'C': {'if': ['if', 'E', 'then', 'L', 'O', 'endif']},
    'O': {'endif': [], 'else': ['else', 'L']},
    'W': {'while': ['while', 'E', 'do', 'L', 'end']},
    'E': {'id': ['E2', 'E1'], 'c': ['E2', 'E1']},
    'E1': {';': [], 'then': [], 'endif': [], 'else': [], 'do': [], 'end': [],
        '<': ['Op1', 'E2', 'E1'], '=': ['Op1', 'E2', 'E1'],
        '!=': ['Op1', 'E2', 'E1'], '$': []},
    'E2': {'id': ['T', 'E3'], 'c': ['T', 'E3']},
    'E3': {';': [], 'then': [], 'endif': [], 'else': [], 'do': [], 'end': [],
        '<': [], '=': [], '!=': [], '+': ['Op2', 'E2'], '-': ['Op2', 'E2'],
        '$': []},
    'T': {'id': ['id'], 'c': ['c']},
    'Op1': {'<': ['<'], '=': ['='], '!=': ['!=']},
    'Op2': {'+': ['+'], '-': ['-']}}

# Error reporting and recovery
first = {'P': ['id', 'if', 'while'],
    'L': ['id', 'if', 'while'],
    'L1': [';', ''],
    'I': ['id', 'if', 'while'],
    'A': ['id'],
    'C': ['if'],
    'O': ['else', ''],
    'W': ['while'],
    'E': ['c', 'id'],
    'E1': ['<', '=', '!=', ''],
    'E2': ['c', 'id'],
    'E3': ['+', '-', ''],
    'T': ['c', 'id'],
    'Op1': ['<', '=', '!='],
    'Op2': ['+', '-']}
# A terminal's FIRST set is only the terminal.
for t in terminals:
    first[t] = [t]
follow = {'P': ['$'],
    'L': ['end', 'else', 'endif', '$'],
    'L1': ['end', 'else', 'endif', '$'],
    'I': [';', 'end', 'else', 'endif', '$'],
    'A': [';', 'end', 'else', 'endif', '$'],
    'C': [';', 'end', 'else', 'endif', '$'],
    'O': ['endif'],
    'W': [';', 'end', 'else', 'endif', '$'],
    'E': ['do', 'then', ';', 'end', 'else', 'endif', '$'],
    'E1': ['do', 'then', ';', 'end', 'else', 'endif', '$'],
    'E2': ['<', '=', '!=', 'do', 'then', ';', 'end', 'else', 'endif', '$'],
    'E3': ['<', '=', '!=', 'do', 'then', ';', 'end', 'else', 'endif', '$'],
    'T': ['+', '-', '<', '=', '!=', 'do', 'then', ';', 'end', 'else', 'endif',
        '$'],
    'Op1': ['c', 'id'],
    'Op2': ['c', 'id']}
# Tokens that can start statements.
start = ['id', 'if', 'while']
toplevel = ['P', 'L']

# Options
DEBUG = False
TEST = False

def lex(string):
    '''Convert a string into a list of tokens.'''

    pattern = '|'.join(re.escape(t) for t in terminals) + r'|\S+'
    return re.findall(pattern, string)

def panic(pos, tokens, tos, stack, derivation):
    '''The parser's prediction is wrong. Print an appropriate error message and
    then synchronise on the FOLLOW set of the top of stack.'''

    # Expected output is the FIRST set of the top of the stack but don't use
    # epsilon in the error message.
    expected = first[tos] + follow[tos] if '' in first[tos] else first[tos]
    while '' in expected:
        expected.remove('')
    # Make a nice error message.
    msg = "'" + "', '".join(expected[:-1]) + "'" + " or '" + expected[-1] + "'"
    if not TEST:
        print("expected {0} instead of '{1}'".format(msg, tokens[pos]),
            file=sys.stderr)
        if DEBUG:
            print()
    split = derivation.split()
    # Error recovery
    while True:
        if tos in toplevel:
            # Top-level error recovery creates spurious error messages; give
            # up.
            if not TEST:
                if DEBUG:
                    print(' '.join(tokens[pos:]))
                i = split.index(tos)
                derivation = ' '.join(split[:i] + tokens[pos:-1])
                print(derivation, '\t', ' '.join(reversed(stack + [tos])))
            print('rejected')
            sys.exit(1)
        elif pos >= len(tokens):
            # Ran out of input to synchronise with. Print the final derivation
            # and stack then bail out.
            pos = len(tokens) - 1
            if not TEST:
                if DEBUG:
                    print(' '.join(tokens[pos:]))
                i = split.index(tos)
                derivation = ' '.join(split[:i-1])
                print(derivation, '\t', ' '.join(reversed(stack + [tos])))
            print('rejected')
            sys.exit(1)
        elif tokens[pos] in follow[tos]:
            split.remove(tos)
            break
        elif tokens[pos] in start:
            # Find the first item on the stack with token in its FIRST set.
            while not [t for t in first[tos] if t in start]:
                split.remove(tos)
                tos = stack.pop()
                if not stack:
                    # Ran out of stack to synchronise with. Print the final
                    # derivation and stack then bail out.
                    if not TEST:
                        if DEBUG:
                            print(' '.join(tokens[pos:]))
                        derivation = ' '.join(split + tokens[pos:-1])
                        print(derivation, '\t$')
                    return (pos, derivation)
            stack += tos
            break
        elif tokens[pos] in first[tos]:
            # Possible to restart from this token and variable. Repair the
            # stack and continue.
            stack += tos
            break
        # Put skipped input from error recovery into the derivation.
        i = split.index(tos)
        split = split[:i] + [tokens[pos]] + split[i:]
        pos += 1
    derivation = ' '.join(split)
    return (pos, derivation)

def parse(tokens):
    '''Parse a list of tokens which determines whether the given string belongs
    to the grammar.'''

    stack = ['$', 'P']
    derivation = stack[-1]
    error = False
    pos = 0
    panicking = False
    while stack:
        token = tokens[pos]
        # Information about the current step.
        if not TEST:
            if DEBUG:
                print(' '.join(tokens[pos:]))
            print(derivation, '\t', ' '.join(reversed(stack)))
        # Top of stack
        tos = stack.pop()
        if tos in terminals:
            if tos == token:
                # Reached the end of the input.
                if token == '$':
                    break
                pos += 1
                panicking = False
            else:
                # The top of stack didn't match the given terminal.
                error = True
                if not TEST:
                    print("expected '{0}' instead of '{1}'".format(tos, token),
                        file=sys.stderr)
                # Replace the predicted terminal in the derivation.
                derivation = ' '.join(derivation.replace(tos, token,
                    1).split())
                panicking = True
        else:
            # Top of stack is a variable.
            try:
                rule = table[tos][token]
            # No T[V,a]; start panicking!
            except KeyError:
                if panicking:
                    # Panicking a second time in a row. Will lead to spurious
                    # error messages so bail out.
                    if not TEST:
                        i = derivation.index(tos)
                        print(derivation[:i] + ' '.join(tokens[pos+1:-1]),
                            '\t', ' '.join(reversed(stack + [tos])))
                    print('rejected')
                    sys.exit(1)
                panicking = True
                error = True
                pos, derivation = panic(pos, tokens, tos, stack, derivation)
                continue
            # Push the given rule onto the stack.
            for r in reversed(rule):
                stack.append(r)
            # Replace the variable with its rule.
            derivation = ' '.join(derivation.replace(tos, ' '.join(rule),
                1).split())
            panicking = False
        if DEBUG and not TEST:
            print()
    if not error:
        print('accepted')
        sys.exit(0)
    else:
        print('rejected')
        sys.exit(1)

def main():
    global DEBUG, TEST
    tokens = []
    # Process the given arguments.
    try:
        opts, args = getopt(sys.argv[1:], 'dt')
    except GetoptError:
        print('parser [-dt] [file ...]')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-d':
            DEBUG = True
        elif opt == '-t':
            TEST = True
    # Process the given files.
    for line in input(args):
        tokens += lex(line)
    # Mark the end of the tokens.
    tokens += ['$']
    # Let's do this!
    parse(tokens)

if __name__ == '__main__':
    main()
