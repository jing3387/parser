#!/usr/bin/env python

from __future__ import print_function
from fileinput import input
from getopt import getopt, GetoptError
import sys, re

terminals = [';', 'id', ':=', 'if', 'then', 'endif', 'else', 'while', 'do',
    'end', 'c', '<', '=', '!=', '+', '-', '$']

table = {'P': {'id': ['L'], 'if': ['L'], 'while': ['L']},
    'L': {'id': ['I', 'L1'], 'if': ['I', 'L1'], 'while': ['I', 'L1']},
    'L1': {';': [';', 'L'], 'endif': [], 'else': [], 'end': [], '$': []},
    'I': {'id': ['A'], 'if': ['C'], 'while': ['W']},
    'A': {'id': ['id', ':=', 'E']},
    'C': {'if': ['if', 'E', 'then', 'L', 'O', 'endif']},
    'O': {'endif': [], 'else': ['else', 'L']},
    'W': {'while': ['while', 'E', 'do', 'L', 'end']},
    'E': {'id': ['E2', 'E1'], 'c': ['E2', 'E1']},
    'E1': {';': [], 'then': [], 'endif': [], 'else': [], 'do': [], 'end': [],
        '<': ['Op1', 'E2', 'E1'], '=': ['Op1', 'E2', 'E1'],
        '!=': ['Op1', 'E2', 'E1'], '$': []},
    'E2': {'id': ['T', 'E3'], 'c': ['T', 'E3']},
    'E3': {';': [], 'then': [], 'endif': [], 'else': [], 'do': [], 'end': [],
        '<': [], '=': [], '!=': [], '+': ['Op2', 'E2'], '-': ['Op2', 'E2'],
        '$': []},
    'T': {'id': ['id'], 'c': ['c']},
    'Op1': {'<': ['<'], '=': ['='], '!=': ['!=']},
    'Op2': {'+': ['+'], '-': ['-']}}

# Error reporting and recovery
error = False

first = {'P': ['id', 'if', 'while'],
    'L': ['id', 'if', 'while'],
    'L1': [';', ''],
    'I': ['id', 'if', 'while'],
    'A': ['id'],
    'C': ['if'],
    'O': ['else', ''],
    'W': ['while'],
    'E': ['c', 'id'],
    'E1': ['<', '=', '!=', ''],
    'E2': ['c', 'id'],
    'E3': ['+', '-', ''],
    'T': ['c', 'id'],
    'Op1': ['<', '=', '!='],
    'Op2': ['+', '-']}

follow = {'P': ['$'],
    'L': ['end', 'else', 'endif', '$'],
    'L1': ['end', 'else', 'endif', '$'],
    'I': [';', 'end', 'else', 'endif', '$'],
    'A': [';', 'end', 'else', 'endif', '$'],
    'C': [';', 'end', 'else', 'endif', '$'],
    'O': ['endif'],
    'W': [';', 'end', 'else', 'endif', '$'],
    'E': ['do', 'then', ';', 'end', 'else', 'endif', '$'],
    'E1': ['do', 'then', ';', 'end', 'else', 'endif', '$'],
    'E2': ['<', '=', '!=', 'do', 'then', ';', 'end', 'else', 'endif', '$'],
    'E3': ['<', '=', '!=', 'do', 'then', ';', 'end', 'else', 'endif', '$'],
    'T': ['+', '-', '<', '=', '!=', 'do', 'then', ';', 'end', 'else', 'endif',
        '$'],
    'Op1': ['c', 'id'],
    'Op2': ['c', 'id']}

# Options
DEBUG = False
TEST = False

def lex(s):
    '''Convert a string into a list of tokens.'''

    return re.findall('|'.join(re.escape(t) for t in terminals), s)

def panic(token, pos, tos, stack):
    '''The parser's prediction is wrong. Print an appropriate error message and
    then synchronise on the FOLLOW set of the top of stack.'''

    # Expected output is the FIRST set of the top of the stack but don't use
    # epsilon in the error message.
    expected = [e for e in first[tos] if e != '']
    # Given this variable can produce epsilon find FIRST set of the next
    # item on the stack.
    while '' in first[tos]:
        tos = stack.pop()
        # FIRST of a terminal is a set containing only the terminal.
        if tos in terminals:
            expected += [tos]
            # A terminal definitely can't produce epsilon.
            break
        expected = [e for e in expected + first[tos] if e != '']
    # Make a nice error message.
    msg = "'" + ", '".join(expected[:-1]) + "'" + " or '" + expected[-1] + "'"
    if not TEST:
        print("expected {0} instead of '{1}'".format(msg, token),
            file=sys.stderr)
    # FOLLOW-set error recovery
    if tos in terminals or token in follow[tos]:
        return
    else:
        pos += 1
        return

def parse(tokens):
    '''Parse a list of tokens which determines whether the given string belongs
    to the grammar.'''

    stack = ['$', 'P']
    error = False
    pos = 0
    while stack:
        token = tokens[pos]
        # Information about the current step.
        if DEBUG and not TEST:
            print(' '.join(tokens[pos:]))
        if not TEST:
            print(' '.join(reversed(stack)))
        tos = stack.pop()
        if tos in terminals:
            if tos == token:
                # Reached the end of the input.
                if token == '$':
                    if not error:
                        print('accepted')
                        sys.exit(0)
                    else:
                        print('rejected')
                        sys.exit(1)
                pos += 1
            else:
                # The top of stack didn't match the given terminal, let's issue
                # and error and try again.
                error = True
                if not TEST:
                    print("expected '{0}' instead of '{1}'".format(tos, token),
                        file=sys.stderr)
        else:
            # Top of stack is a variable.
            try:
                rule = table[tos][token]
            # There's no applicable rule for the top of stack and the given
            # token. Start panicking!
            except KeyError:
                # No rule for T[V, a].
                error = True
                panic(token, pos, tos, stack)
            # Push the given rule onto the stack.
            for r in reversed(rule):
                stack.append(r)
        if DEBUG and not TEST:
            print()

def main():
    global DEBUG, TEST
    tokens = []
    # Process the given arguments.
    try:
        opts, args = getopt(sys.argv[1:], 'dt')
    except GetoptError:
        print('parser [-dt] [file ...]')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-d':
            DEBUG = True
        elif opt == '-t':
            TEST = True
    # Process the given files.
    for line in input(args):
        tokens += lex(line)
    # Mark the end of the tokens.
    tokens += ['$']
    # Let's do this!
    parse(tokens)

if __name__ == '__main__':
    main()
